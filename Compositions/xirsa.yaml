---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xirsaauths.aws.community.day.dach
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: aws.community.day.dach/v1alpha1
    kind: XIrsaAuth
  resources:
    - name: policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Policy
      patches:
      - type: CombineFromComposite
        combine:
          variables:
          - fromFieldPath: spec.service.name
          - fromFieldPath: spec.service.stage
          strategy: string
          string:
            fmt: "eks-irsa-%s-%s-policy"
        toFieldPath: spec.forProvider.name
      - fromFieldPath: spec.parameters.policyDocument
        toFieldPath:   spec.forProvider.document
      - fromFieldPath: spec.service.stage
        toFieldPath:   metadata.annotations[awsome.platform.api/stage]
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.arn
        toFieldPath: status.policyArn
      - type: ToCompositeFieldPath
        fromFieldPath: metadata.annotations[awsome.platform.api/stage]
        toFieldPath: status.account
        policy:
          fromFieldPath: Required
        transforms:
          - type: map
            map:
              dev:  "955983830461"
              qa:   "955983830461"
              prod: "388432646402"
    - name: role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        spec:
          forProvider:
              assumeRolePolicyDocument: ""
      patches:
      - type: CombineFromComposite
        toFieldPath: metadata.annotations[crossplane.io/external-name]
        combine:
          variables:
          - fromFieldPath: spec.service.name
          - fromFieldPath: spec.service.stage
          strategy: string
          string:
            fmt: "eks-irsa-%s-%s-role"
      - type: ToCompositeFieldPath
        fromFieldPath: status.atProvider.arn
        toFieldPath: status.roleArn
      - type: CombineFromComposite
        toFieldPath: spec.forProvider.assumeRolePolicyDocument
        combine:
          variables:
          - fromFieldPath: status.account
          - fromFieldPath: spec.parameters.oidcProvider
          - fromFieldPath: spec.parameters.oidcProvider
          - fromFieldPath: spec.service.stage
          - fromFieldPath: spec.parameters.serviceAccount
          strategy: string
          string:
            fmt: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                      "StringEquals": {
                        "%s:sub": "system:serviceaccount:%s:%s"
                      }
                    }
                  }
                ]
              }
        policy:
          fromFieldPath: Required
    - name: policy-attachement
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArnSelector:
              matchControllerRef: true
            roleNameSelector:
              matchControllerRef: true