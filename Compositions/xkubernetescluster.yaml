---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xkubernetesclusters.javaland.cloud.platform.api
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: javaland.cloud.platform.api/v1alpha1
    kind: XKubernetesCluster
  writeConnectionSecretsToNamespace: crossplane-system
  resources:
  ######################################################################
  - name: aws-eks-cluster
    base:
      apiVersion: eks.aws.crossplane.io/v1beta1
      kind: Cluster
      spec:
        forProvider:
          region: eu-west-1
          version: "1.23"
          roleArnSelector:
            matchControllerRef: true
          resourcesVpcConfig:
            endpointPrivateAccess: true
            endpointPublicAccess: true
            subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                access: private
          tags:
            vpcLinkID: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    - fromFieldPath: metadata.annotations[crossplane.io/external-name]
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.version
      toFieldPath: spec.forProvider.version
    - fromFieldPath: spec.id
      toFieldPath: spec.writeConnectionSecretToRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-cluster'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleArnSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.name
      toFieldPath: status.clusterName
    - fromFieldPath: spec.stage
      toFieldPath: metadata.labels.stage
    - type: ToCompositeFieldPath
      fromFieldPath: metadata.labels.stage
      toFieldPath: status.accountID
      transforms:
      - type: map
        map:
          dev:  "518283773752"
          qa:   "518283773752"
          prod: "518283773752"
    # - type: ToCompositeFieldPath
    #   fromFieldPath: status.atProvider.arn
    #   toFieldPath: status.accountID
    #   transforms:
    #   - type: string
    #     string:
    #       type: Regexp
    #       regexp:
    #         match: 'arn:aws:eks:*:(\d+):.*'
    #         group: 1
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.controlPlaneStatus
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.resourcesVpcConfig.clusterSecurityGroupId
      toFieldPath: status.securityGroupIDControlPlane
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.clusterARN
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.endpoint
      toFieldPath: status.clusterEndpoint
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.certificateAuthorityData
      toFieldPath: status.clusterCaData
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.identity.oidc.issuer
      toFieldPath: status.oidcProvider
      transforms:
      - type: string
        string:
          type: TrimPrefix
          trim: 'https://'
    - fromFieldPath: spec.writeConnectionSecretToRef.namespace
      toFieldPath: spec.writeConnectionSecretToRef.namespace
    - fromFieldPath: status.vpcLinkID
      toFieldPath: spec.forProvider.tags.vpcLinkID
      policy:
        fromFieldPath: Required
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE
    connectionDetails:
    - fromConnectionSecretKey: kubeconfig
    - fromConnectionSecretKey: kubeconfig
      name: value
  ######################################################################
  - name: aws-eks-cluster-cni-addon
    base:
      apiVersion: eks.aws.crossplane.io/v1alpha1
      kind: Addon
      spec:
        forProvider:
          region: eu-west-1
          addonName: vpc-cni
          addonVersion: "v1.11.2-eksbuild.1"
          resolveConflicts: OVERWRITE
          clusterNameSelector:
            matchControllerRef: true
         #serviceAccountRoleARN: patch
          
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-addon-vpc-cni'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    # - fromFieldPath: status.iamRoleArnControlPlane
    #   toFieldPath: spec.forProvider.serviceAccountRoleARN
    #   policy:
    #     fromFieldPath: Required
  ######################################################################
  - name: aws-eks-cluster-coredns-addon
    base:
      apiVersion: eks.aws.crossplane.io/v1alpha1
      kind: Addon
      spec:
        forProvider:
          region: eu-west-1
          addonName: coredns
          addonVersion: "v1.8.7-eksbuild.2"
          resolveConflicts: OVERWRITE
          clusterNameSelector:
            matchControllerRef: true
         #serviceAccountRoleARN: patch
          
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-addon-coredns'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
  ######################################################################
  - name: aws-ec2-launch-template-node-group
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: LaunchTemplate
      spec:
        forProvider:
          region: eu-west-1
         #launchTemplateName: patch
          launchTemplateData:
            metadataOptions:
              httpEndpoint: enabled
              httpTokens: optional
              httpPutResponseHopLimit: 2
            monitoring:
              enabled: true
            # tagSpecifications:
            #   tags:
            #   - key: Name
            #     value: ""
           #securityGroupIDs: patch
           #-
            # tagSpecifications:
            #   tags:
            #   - key: Name
            #     value: gitops- #patch
          
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup-launch-template'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.launchTemplateName
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup-launch-template'
    - fromFieldPath: status.securityGroupIDNodegroup
      toFieldPath: spec.forProvider.launchTemplateData.securityGroupIDs[0]
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: k8s-configmap-aws-auth
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: aws-auth
              namespace: kube-system
           #data:
             #mapRoles: patch
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-aws-auth-cm'
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.manifest.data.mapRoles
      combine:
        variables:
        - fromFieldPath: status.iamRoleArnNodegroup
        - fromFieldPath: status.accountID
        - fromFieldPath: status.accountID
        strategy: string
        string:
          fmt: |
            - rolearn: %s
              username: system:node:{{EC2PrivateDNSName}}
              groups:
                - system:bootstrappers
                - system:nodes
            - rolearn: arn:aws:iam::%s:role/ArgoCDControllerIRSARole
              username: arn:aws:iam::%s:role/ArgoCDControllerIRSARole
              groups:
                - system:masters
            - rolearn: arn:aws:iam::518283773752:role/Deployer
              username: deployer
              groups:
                - system:masters

      policy:
        fromFieldPath: Required
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    
  ######################################################################
  - name: aws-eks-node-group
    base:
      apiVersion: eks.aws.crossplane.io/v1alpha1
      kind: NodeGroup
      spec:
        forProvider:
          region: eu-west-1
          launchTemplate:
            nameSelector:
              matchControllerRef: true
          clusterNameSelector:
            matchControllerRef: true
          nodeRoleSelector:
            matchControllerRef: true
          subnetSelector:
            matchControllerRef: true
          scalingConfig:
            minSize: 1
            maxSize: 10
            desiredSize: 1
          instanceTypes:
          - t3.small
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
    - fromFieldPath: metadata.annotations[crossplane.io/external-name]
      toFieldPath: metadata.annotations[crossplane.io/external-name]
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.nodeSize
      toFieldPath: spec.forProvider.instanceTypes[0]
      transforms:
      - type: map
        map:
          small: t3.small
          medium: t3.medium
          large: t3.large
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.nodeRoleSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
    - fromFieldPath: spec.parameters.minNodeCount
      toFieldPath: spec.forProvider.scalingConfig.minSize
    - fromFieldPath: spec.parameters.minNodeCount
      toFieldPath: spec.forProvider.scalingConfig.desiredSize
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.status
      toFieldPath: status.nodeGroupStatus
    readinessChecks:
    - type: MatchString
      fieldPath: status.atProvider.status
      matchString: ACTIVE
  ######################################################################
  - name: aws-iam-role-controlplane
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      spec:
        forProvider:
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "eks.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.iamRoleArnControlPlane
    - fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
  ######################################################################
  - name: aws-iam-role-nodegroup
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      spec:
        forProvider:
          tags:
          - key: Name
            value: gitops-controll-plane-worker-node
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": [
                              "ec2.amazonaws.com"
                          ]
                      },
                      "Action": [
                          "sts:AssumeRole"
                      ]
                  }
              ]
            }
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.iamRoleArnNodegroup
    # - type: ToCompositeFieldPath
    #   fromFieldPath: status.atProvider.arn
    #   toFieldPath: status.accountID
    #   transforms:
    #   - type: string
    #     string:
    #       type: Regexp
    #       regexp:
    #         match: 'arn:aws:iam::(\d+):.*'
    #         group: 1
    - fromFieldPath: spec.id
      toFieldPath: metadata.labels.role
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
  ######################################################################
  - name: aws-iam-role-attachment-cluster
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
  - name: aws-iam-role-attachment-service
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-service'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane'
  - name: aws-iam-role-attachment-worker
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-worker'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
  - name: aws-iam-role-attachment-cni
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-cni'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
  - name: aws-iam-role-attachment-registry
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-registry'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
  - name: aws-iam-role-attachment-ssm
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-ssm'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
  - name: aws-iam-role-attachment-readonly
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/ReadOnlyAccess
          roleNameSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-readonly'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup'
  ######################################################################
  - name: aws-vpc-worker-nodes
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: VPC
      spec:
        forProvider:
          region: eu-west-1
          cidrBlock: 23.0.0.0/16
          enableDnsSupport: true
          enableDnsHostNames: true
          tags:
          - key: Name
            value: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-vpc'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-vpc'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
  ######################################################################
  - name: aws-security-group-rule-control-plane
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: SecurityGroupRule
      spec:
        forProvider:
          region:   eu-west-1
          type:     ingress
          fromPort: 0
          toPort:   65535
          protocol: "tcp"
         #securityGroupId: patch
         #sourceSecurityGroupId: patch
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-controlplane-sg-rule'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: status.securityGroupIDNodegroup
      toFieldPath: spec.forProvider.sourceSecurityGroupId
      policy:
        fromFieldPath: Required
    - fromFieldPath: status.securityGroupIDControlPlane
      toFieldPath: spec.forProvider.securityGroupId
      policy:
        fromFieldPath: Required
    readinessChecks:
    - type: None
  ######################################################################
  - name: aws-security-group-nodegroup
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: SecurityGroup
      metadata:
        labels:
          mapping: nodegroup
      spec:
        forProvider:
          description: Control Plane communication with worker nodes
          groupName: ""
          region: eu-west-1
          ignoreEgress:  true
          ignoreIngress: true
          vpcIdSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup-sg'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.groupName
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup-sg'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.securityGroupID
      toFieldPath: status.securityGroupIDNodegroup
    readinessChecks:
    - type: None
  ######################################################################
  - name: aws-security-group-rule-nodegroup-egress
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: SecurityGroupRule
      spec:
        forProvider:
          region:   eu-west-1
          type:     egress
          fromPort: 0
          toPort:   65535
          protocol: "tcp"
          cidrBlock: "0.0.0.0/0"
         #securityGroupId: patch
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup-sg-rule-egress'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: status.securityGroupIDNodegroup
      toFieldPath: spec.forProvider.securityGroupId
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: aws-security-group-rule-nodegroup-ingress-self
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: SecurityGroupRule
      spec:
        forProvider:
          region:   eu-west-1
          type:     ingress
          fromPort: 0
          toPort:   65535
          protocol: "tcp"
         #securityGroupId: patch
         #sourceSecurityGroupId: patch
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup-sg-rule-ingress-self'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: status.securityGroupIDNodegroup
      toFieldPath: spec.forProvider.securityGroupId
      policy:
        fromFieldPath: Required
    - fromFieldPath: status.securityGroupIDNodegroup
      toFieldPath: spec.forProvider.sourceSecurityGroupId
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: aws-security-group-rule-nodegroup-ingress-control-plane
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: SecurityGroupRule
      spec:
        forProvider:
          region:   eu-west-1
          type:     ingress
          fromPort: 0
          toPort:   65535
          protocol: "tcp"
         #securityGroupId: patch
         #sourceSecurityGroupId: patch
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-nodegroup-sg-rule-ingress-control-plane'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: status.securityGroupIDNodegroup
      toFieldPath: spec.forProvider.securityGroupId
      policy:
        fromFieldPath: Required
    - fromFieldPath: status.securityGroupIDControlPlane
      toFieldPath: spec.forProvider.sourceSecurityGroupId
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: aws-public-subnet-nodepool-1a
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          zone: eu-west-1a
          access: public
          #endpoint: 'true'
      spec:
        forProvider:
          region: eu-west-1
          availabilityZone: eu-west-1a
          cidrBlock: 23.0.0.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: Name
            value: ""
          - key: kubernetes.io/role/elb
            value: "1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1a'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   metadata.labels.zone
      transforms:
      - type: string
        string:
          fmt: '%sa'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sa'
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-public-subnet-1'
  - name: aws-public-subnet-nodepool-1b
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          zone: eu-west-1b
          access: public
          #endpoint: 'true'
      spec:
        forProvider:
          region: eu-west-1
          availabilityZone: eu-west-1b
          cidrBlock: 23.0.1.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: Name
            value: ""
          - key: kubernetes.io/role/elb
            value: "1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1b'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   metadata.labels.zone
      transforms:
      - type: string
        string:
          fmt: '%sb'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sb'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-public-subnet-2'
  - name: aws-public-subnet-nodepool-1c
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          zone: eu-west-1c
          access: public
      spec:
        forProvider:
          region: eu-west-1
          availabilityZone: eu-west-1c
          cidrBlock: 23.0.2.0/24
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
          tags:
          - key: Name
            value: ""
          - key: kubernetes.io/role/elb
            value: "1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-public-1c'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   metadata.labels.zone
      transforms:
      - type: string
        string:
          fmt: '%sc'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sc'
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-public-subnet-3'
  ######################################################################
  - name: aws-private-subnet-nodepool-1a
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          zone: eu-west-1a
          access: private
          endpoint: 'true'
      spec:
        forProvider:
          region: eu-west-1
          availabilityZone: eu-west-1a
          cidrBlock: 23.0.3.0/24
          vpcIdSelector:
            matchControllerRef: true
          tags:
          - key: Name
            value: ""
          - key: kubernetes.io/role/internal-elb
            value: "1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1a'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   metadata.labels.zone
      transforms:
      - type: string
        string:
          fmt: '%sa'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sa'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-private-subnet-1'
  - name: aws-private-subnet-nodepool-1b
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          zone: eu-west-1b
          access: private
          endpoint: 'true'
      spec:
        forProvider:
          region: eu-west-1
          availabilityZone: eu-west-1b
          cidrBlock: 23.0.4.0/24
          vpcIdSelector:
            matchControllerRef: true
          tags:
          - key: Name
            value: ""
          - key: kubernetes.io/role/internal-elb
            value: "1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1b'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   metadata.labels.zone
      transforms:
      - type: string
        string:
          fmt: '%sb'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sb'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-private-subnet-2'
  - name: aws-private-subnet-nodepool-1c
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          zone: eu-west-1c
          access: private
      spec:
        forProvider:
          region: eu-west-1
          availabilityZone: eu-west-1c
          cidrBlock: 23.0.5.0/24
          vpcIdSelector:
            matchControllerRef: true
          tags:
          - key: Name
            value: ""
          - key: kubernetes.io/role/internal-elb
            value: "1"
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-1c'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   metadata.labels.zone
      transforms:
      - type: string
        string:
          fmt: '%sc'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.availabilityZone
      transforms:
      - type: string
        string:
          fmt: '%sc'
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-private-subnet-3'
  ######################################################################
  - name: aws-internet-gateway
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: InternetGateway
      spec:
        forProvider:
          region: eu-west-1
          vpcIdSelector:
            matchControllerRef: true
          tags:
          - key: Name
            value: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-internet-gayeway'
  ######################################################################
  - name: aws-nat-gateway
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: NATGateway
      spec:
        forProvider:
          region: eu-west-1
          allocationIdSelector:
            matchControllerRef: true
          subnetIdSelector:
            matchControllerRef: true
            matchLabels:
             access: public
             zone: eu-west-1a
          connectivityType: public
          tags:
          - key: Name
            value: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gayeway'
  ######################################################################
  - name: aws-nat-gateway-eip
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Address
      spec:
        forProvider:
          region: eu-west-1
          domain: vpc
          tags:
          - key: Name
            value: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-nat-gayeway-eip'
  ######################################################################
  - name: aws-public-route-table
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: RouteTable
      spec:
        forProvider:
          region: eu-west-1
          vpcIdSelector:
            matchControllerRef: true
          routes:
          - destinationCidrBlock: 0.0.0.0/0
            gatewayIdSelector:
              matchControllerRef: true
          associations:
          - subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                zone: eu-west-1a
                access: public
          - subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                zone: eu-west-1b
                access: public
          - subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                zone: eu-west-1c
                access: public
          tags:
          - key: Name
            value: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.associations[0].subnetIdSelector.matchLabels.zone
      transforms:
      - type: string
        string:
          fmt: '%sa'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.associations[1].subnetIdSelector.matchLabels.zone
      transforms:
      - type: string
        string:
          fmt: '%sb'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.associations[2].subnetIdSelector.matchLabels.zone
      transforms:
      - type: string
        string:
          fmt: '%sc'
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-public-route-table'
  ######################################################################
  - name: aws-private-route-table-1
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: RouteTable
      metadata:
        labels:
          zone: eu-west-1a
      spec:
        forProvider:
          region: eu-west-1
          ignoreRoutes: true
          vpcIdSelector:
            matchControllerRef: true
          associations:
          - subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                zone: eu-west-1a
                access: private
          tags:
          - key: Name
            value: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-route-table-1a'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.associations[0].subnetIdSelector.matchLabels.zone
      transforms:
      - type: string
        string:
          fmt: '%sa'
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-private-route-table-1a'
  ######################################################################
  - name: aws-private-route-table-1-route-nat-gateway
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: Route
      spec:
        forProvider:
          region: eu-west-1
          destinationCIDRBlock: "0.0.0.0/0"
          natGatewayIdSelector:
            matchControllerRef: true
          routeTableIdSelector:
            matchControllerRef: true
            matchLabels:
              zone: eu-west-1a
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-route-table-1a-route-nat'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.routeTableIdSelector.matchLabels.zone
      transforms:
      - type: string
        string:
          fmt: '%sa'
  ######################################################################
  - name: aws-private-route-table-2
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: RouteTable
      metadata:
        labels:
          zone: eu-west-1b
      spec:
        forProvider:
          region: eu-west-1
          ignoreRoutes: true
          vpcIdSelector:
            matchControllerRef: true
          associations:
          - subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                zone: eu-west-1b
                access: private
          tags:
          - key: Name
            value: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-route-table-1b'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.associations[0].subnetIdSelector.matchLabels.zone
      transforms:
      - type: string
        string:
          fmt: '%sb'
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-private-route-table-1b'
  ######################################################################
  - name: aws-private-route-table-2-route-nat-gateway
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: Route
      
      spec:
        forProvider:
          region: eu-west-1
          destinationCIDRBlock: "0.0.0.0/0"
          natGatewayIdSelector:
            matchControllerRef: true
          routeTableIdSelector:
            matchControllerRef: true
            matchLabels:
              zone: eu-west-1b
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-route-table-1b-route-nat'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.routeTableIdSelector.matchLabels.zone
      transforms:
      - type: string
        string:
          fmt: '%sb'
  ######################################################################
  - name: aws-private-route-table-3
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: RouteTable
      metadata:
        labels:
          zone: eu-west-1c
      spec:
        forProvider:
          region: eu-west-1
          ignoreRoutes: true
          vpcIdSelector:
            matchControllerRef: true
          associations:
          - subnetIdSelector:
              matchControllerRef: true
              matchLabels:
                zone: eu-west-1c
                access: private
          tags:
          - key: Name
            value: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-route-table-1c'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.associations[0].subnetIdSelector.matchLabels.zone
      transforms:
      - type: string
        string:
          fmt: '%sc'
    - fromFieldPath: spec.id
      toFieldPath:   spec.forProvider.tags[0].value
      transforms:
      - type: string
        string:
          fmt: '%s-private-route-table-1c'
  ######################################################################
  - name: aws-private-route-table-3-route-nat-gateway
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: Route
      
      spec:
        forProvider:
          region: eu-west-1
          destinationCIDRBlock: "0.0.0.0/0"
          natGatewayIdSelector:
            matchControllerRef: true
          routeTableIdSelector:
            matchControllerRef: true
            matchLabels:
              zone: eu-west-1c
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-private-route-table-1c-route-nat'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.routeTableIdSelector.matchLabels.zone
      transforms:
      - type: string
        string:
          fmt: '%sc'
  ######################################################################
  - name: crossplane-k8s-provider-config
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            key: kubeconfig
            name: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
    - fromFieldPath: spec.writeConnectionSecretToRef.namespace
      toFieldPath:   spec.credentials.secretRef.namespace
    - fromFieldPath: spec.id
      toFieldPath:   spec.credentials.secretRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-cluster'
    readinessChecks:
    - type: None
  ######################################################################
  - name: crossplane-helm-provider-config
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            key: kubeconfig
            name: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath:   metadata.name
    - fromFieldPath: spec.writeConnectionSecretToRef.namespace
      toFieldPath:   spec.credentials.secretRef.namespace
    - fromFieldPath: spec.id
      toFieldPath:   spec.credentials.secretRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-cluster'
    readinessChecks:
    - type: None
  ######################################################################
  # - name: crossplane-k8s-provider-service-account
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: v1
  #           kind: ServiceAccount
  #           metadata:
  #             name: provider-kubernetes
  #             namespace: crossplane-system
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath:   metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-k8s-provider-sa'
  #   - fromFieldPath: spec.id
  #     toFieldPath:   spec.providerConfigRef.name
  # ######################################################################
  # - name: crossplane-k8s-provider-cluster-role-binding
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: rbac.authorization.k8s.io/v1
  #           kind: ClusterRoleBinding
  #           metadata:
  #             name: provider-kubernetes
  #           subjects:
  #           - kind: ServiceAccount
  #             name: provider-kubernetes
  #             namespace: crossplane-system
  #           roleRef:
  #             kind: ClusterRole
  #             name: cluster-admin
  #             apiGroup: rbac.authorization.k8s.io
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath:   metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-k8s-provider-crb'
  #   - fromFieldPath: spec.id
  #     toFieldPath:   spec.providerConfigRef.name
  # ######################################################################
  # - name: crossplane-k8s-provider-controller-config
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: pkg.crossplane.io/v1alpha1
  #           kind: ControllerConfig
  #           metadata:
  #             name: provider-kubernetes
  #           spec:
  #             serviceAccountName: provider-kubernetes
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath:   metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-k8s-provider-cc'
  #   - fromFieldPath: spec.id
  #     toFieldPath:   spec.providerConfigRef.name
  ######################################################################
  # - name: crossplane-k8s-provider
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: pkg.crossplane.io/v1
  #           kind: Provider
  #           metadata:
  #             name: crossplane-provider-kubernetes
  #           spec:
  #             package: crossplane/provider-kubernetes:v0.4.0
  #             controllerConfigRef:
  #               name: provider-kubernetes
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath:   metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-k8s-provider'
  #   - fromFieldPath: spec.id
  #     toFieldPath:   spec.providerConfigRef.name
  ######################################################################
  # - name: crossplane-aws-provider
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: pkg.crossplane.io/v1
  #           kind: Provider
  #           metadata:
  #             name: crossplane-provider-aws
  #           spec:
  #             package: crossplane/provider-aws:v0.30.0
  #             controllerConfigRef:
  #               name: provider-kubernetes
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath:   metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-aws-provider'
  #   - fromFieldPath: spec.id
  #     toFieldPath:   spec.providerConfigRef.name
  ######################################################################
  # - name: crossplane-aws-jet-provider
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: pkg.crossplane.io/v1
  #           kind: Provider
  #           metadata:
  #             name: crossplane-provider-aws-jet
  #           spec:
  #             package: crossplane/provider-jet-aws:v0.5.0
  #             controllerConfigRef:
  #               name: provider-kubernetes
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath:   metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-aws-jet-provider'
  #   - fromFieldPath: spec.id
  #     toFieldPath:   spec.providerConfigRef.name
  ######################################################################
  # - name: crossplane-helm-provider
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: pkg.crossplane.io/v1
  #           kind: Provider
  #           metadata:
  #             name: crossplane-provider-helm
  #           spec:
  #             package: crossplane/provider-helm:v0.10.0
  #             controllerConfigRef:
  #               name: provider-kubernetes
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath:   metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-helm-provider'
  #   - fromFieldPath: spec.id
  #     toFieldPath:   spec.providerConfigRef.name
  ######################################################################
  # - name: crossplane-terraform-provider
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: pkg.crossplane.io/v1
  #           kind: Provider
  #           metadata:
  #             name: crossplane-provider-terraform
  #           spec:
  #             package: crossplane/provider-terraform:v0.3.0
  #             controllerConfigRef:
  #               name: provider-kubernetes
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath:   metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-terraform-provider'
  #   - fromFieldPath: spec.id
  #     toFieldPath:   spec.providerConfigRef.name
  ######################################################################
  - name: helm-release-crossplane
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      spec:
        rollbackLimit: 3
        forProvider:
          namespace: crossplane-system
          chart:
            name: crossplane
            repository: https://charts.crossplane.io/stable
            version: '1.11.1'
          values:
            replicas: 2
            resourcesCrossplane:
              limits:
                cpu:	500m
                memory:	2G
              requests:
                cpu: 500m
                memory: 2G
            resourcesRBACManager:
              limits:
                cpu:	250m
                memory:	2G
              requests:
                cpu: 250m
                memory: 2G
            rbacManager:
              replicas: 2
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-crossplane'
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  ######################################################################
  - name: helm-release-external-secrets-operator
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      spec:
        rollbackLimit: 3
        forProvider:
          namespace: external-secrets
          chart:
            name: external-secrets
            repository: https://charts.external-secrets.io
            version: '0.5.9'
          set:
          - name: webhook.port
            value: '9443'
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-secrets-operator'
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  ######################################################################
  - name: k8s-service-account-external-secrets-operator
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
             #name: patch
              namespace: external-secrets
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-secrets-operator-sa'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-secrets-operator-sa'
    - fromFieldPath: status.irsaRoleArnExternalSecretsOperator
      toFieldPath: spec.forProvider.manifest.metadata.annotations[eks.amazonaws.com/role-arn]
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  ######################################################################
  - name: aws-iam-role-external-secrets-operator
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      metadata:
          labels:
            mapping: external-secrets-operator
      spec:
        forProvider:
          assumeRolePolicyDocument: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      transforms:
      - type: string
        string:
          fmt: "eks-irsa-%s-external-secrets-operator-role"
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.irsaRoleArnExternalSecretsOperator
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicyDocument
      combine:
        variables:
        - fromFieldPath: status.accountID
        - fromFieldPath: status.oidcProvider
        - fromFieldPath: status.oidcProvider
        - fromFieldPath: spec.id
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "%s:sub": "system:serviceaccount:external-secrets:%s-external-secrets-operator-sa"
                    }
                  }
                }
              ]
            }
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: aws-iam-role-crossplane-aws-provider
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      metadata:
          labels:
            mapping: crossplane-aws-provider
      spec:
        forProvider:
          assumeRolePolicyDocument: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.annotations[crossplane.io/external-name]
      transforms:
      - type: string
        string:
          fmt: "eks-irsa-%s-aws-provider-role"
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.irsaRoleArnCrossplaneAWSProvider
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicyDocument
      combine:
        variables:
        - fromFieldPath: status.accountID
        - fromFieldPath: status.oidcProvider
        - fromFieldPath: status.oidcProvider
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "%s:sub": "system:serviceaccount:crossplane-system:provider-aws-*"
                    }
                  }
                }
              ]
            }
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: aws-iam-role-attachment-crossplane-aws-provider
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArn: arn:aws:iam::aws:policy/AdministratorAccess
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              mapping: crossplane-aws-provider
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-crossplane-aws-provider'
  ######################################################################
  - name: aws-iam-policy-external-secrets-operator
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Policy
      metadata:
        labels:
          mapping: external-secrets-operator
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-secrets-operator-policy'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.name
      transforms:
      - type: string
        string:
          fmt: "eks-irsa-%s-external-secrets-operator-policy"
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.document
      combine:
        variables:
        - fromFieldPath: spec.parameters.region
        - fromFieldPath: status.accountID
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "secretsmanager:GetResourcePolicy",
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:DescribeSecret",
                    "secretsmanager:ListSecretVersionIds"
                  ],
                  "Resource": [
                    "arn:aws:secretsmanager:%s:%s:secret:*"
                  ]
                }
              ]
            }
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: aws-iam-oicd-identity-provider
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: OpenIDConnectProvider
      spec:
        forProvider:
         #url: patch
          clientIDList:
          - sts.amazonaws.com
          thumbprintList:
          - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-oicd-identity-provider'
    - fromFieldPath: status.oidcProvider
      toFieldPath: spec.forProvider.url
      transforms:
      - type: string
        string:
          fmt: 'https://%s'
      policy:
        fromFieldPath: Required
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.thumbprintList[0]
      transforms:
      - type: map
        map:
          eu-west-1: 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
  ######################################################################
  - name: aws-iam-role-attachment-external-secrets-operator
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArnSelector:
            matchControllerRef: true
            matchLabels:
              mapping: external-secrets-operator
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              mapping: external-secrets-operator
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-secrets-operator'
  ######################################################################
  - name: k8s-external-secrets-operator-secrets-store
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: external-secrets.io/v1beta1
            kind: ClusterSecretStore
            spec:
              provider:
                aws:
                  service: SecretsManager
                  region: eu-west-1
                  auth:
                    jwt:
                      serviceAccountRef:
                        name: ""
                        namespace: external-secrets
             
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-secrets-store'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.provider.aws.auth.jwt.serviceAccountRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-secrets-operator-sa'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-secrets-store'
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.manifest.spec.provider.aws.region
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name  
  ######################################################################
  - name: k8s-external-secrets-aws-creds
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: external-secrets.io/v1beta1
            kind: ExternalSecret
            metadata:
              namespace: crossplane-system
            spec:
              refreshInterval: 1h
              secretStoreRef:
               #name: patch
                kind: ClusterSecretStore
              target:
                name: aws-creds
                creationPolicy: Owner
              dataFrom:
              - extract:
                  key: aws-creds
                  decodingStrategy: Auto
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-external-secret-aws-creds'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.spec.secretStoreRef.name
      transforms:
      - type: string
        string:
          fmt: '%s-secrets-store'
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  ######################################################################
  # - name: crossplane-aws-provider-default-configuration
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: aws.crossplane.io/v1beta1
  #           kind: ProviderConfig
  #           metadata:
  #             name: default
  #           spec:
  #             credentials:
  #               source: Secret
  #               secretRef:
  #                 namespace: crossplane-system
  #                 name: aws-creds
  #                 key: creds
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-crossplane-aws-provider-default-config'
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.providerConfigRef.name
  ######################################################################
  # - name: crossplane-terraform-provider-default-configuration
  #   base:
  #     apiVersion: kubernetes.crossplane.io/v1alpha1
  #     kind: Object
  #     spec:
  #       forProvider:
  #         manifest:
  #           apiVersion: tf.crossplane.io/v1alpha1
  #           kind: ProviderConfig
  #           metadata:
  #             name: default
  #           spec:
  #             credentials:
  #             - filename: aws-creds.ini
  #               source: Secret
  #               secretRef:
  #                 namespace: crossplane-system
  #                 name: aws-creds
  #                 key: credentials
  #             configuration: |
  #                 terraform {
  #                   backend "kubernetes" {
  #                     secret_suffix     = "providerconfig-default"
  #                     namespace         = "crossplane-system"
  #                     in_cluster_config = true
  #                   }
  #                 }
  #                 provider "aws" {
  #                   shared_credentials_file = "aws-creds.ini"
  #                   region = "eu-west-1"
  #                 }
  #   patches:
  #   - fromFieldPath: spec.id
  #     toFieldPath: metadata.name
  #     transforms:
  #     - type: string
  #       string:
  #         fmt: '%s-crossplane-terraform-provider-default-config'
  #   - fromFieldPath: spec.id
  #     toFieldPath: spec.providerConfigRef.name
  ######################################################################
  - name: aws-iam-policy-load-balancer-controller
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Policy
      metadata:
        labels:
          mapping: load-balancer-controller
      spec:
        forProvider:
          document: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "iam:CreateServiceLinkedRole"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "StringEquals": {
                                "iam:AWSServiceName": "elasticloadbalancing.amazonaws.com"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:DescribeAccountAttributes",
                            "ec2:DescribeAddresses",
                            "ec2:DescribeAvailabilityZones",
                            "ec2:DescribeInternetGateways",
                            "ec2:DescribeVpcs",
                            "ec2:DescribeVpcPeeringConnections",
                            "ec2:DescribeSubnets",
                            "ec2:DescribeSecurityGroups",
                            "ec2:DescribeInstances",
                            "ec2:DescribeNetworkInterfaces",
                            "ec2:DescribeTags",
                            "ec2:GetCoipPoolUsage",
                            "ec2:DescribeCoipPools",
                            "elasticloadbalancing:DescribeLoadBalancers",
                            "elasticloadbalancing:DescribeLoadBalancerAttributes",
                            "elasticloadbalancing:DescribeListeners",
                            "elasticloadbalancing:DescribeListenerCertificates",
                            "elasticloadbalancing:DescribeSSLPolicies",
                            "elasticloadbalancing:DescribeRules",
                            "elasticloadbalancing:DescribeTargetGroups",
                            "elasticloadbalancing:DescribeTargetGroupAttributes",
                            "elasticloadbalancing:DescribeTargetHealth",
                            "elasticloadbalancing:DescribeTags"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cognito-idp:DescribeUserPoolClient",
                            "acm:ListCertificates",
                            "acm:DescribeCertificate",
                            "iam:ListServerCertificates",
                            "iam:GetServerCertificate",
                            "waf-regional:GetWebACL",
                            "waf-regional:GetWebACLForResource",
                            "waf-regional:AssociateWebACL",
                            "waf-regional:DisassociateWebACL",
                            "wafv2:GetWebACL",
                            "wafv2:GetWebACLForResource",
                            "wafv2:AssociateWebACL",
                            "wafv2:DisassociateWebACL",
                            "shield:GetSubscriptionState",
                            "shield:DescribeProtection",
                            "shield:CreateProtection",
                            "shield:DeleteProtection"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AuthorizeSecurityGroupIngress",
                            "ec2:RevokeSecurityGroupIngress"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:CreateSecurityGroup"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:CreateTags"
                        ],
                        "Resource": "arn:aws:ec2:*:*:security-group/*",
                        "Condition": {
                            "StringEquals": {
                                "ec2:CreateAction": "CreateSecurityGroup"
                            },
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:CreateTags",
                            "ec2:DeleteTags"
                        ],
                        "Resource": "arn:aws:ec2:*:*:security-group/*",
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:AuthorizeSecurityGroupIngress",
                            "ec2:RevokeSecurityGroupIngress",
                            "ec2:DeleteSecurityGroup"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "Null": {
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:CreateLoadBalancer",
                            "elasticloadbalancing:CreateTargetGroup"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:CreateListener",
                            "elasticloadbalancing:DeleteListener",
                            "elasticloadbalancing:CreateRule",
                            "elasticloadbalancing:DeleteRule"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:AddTags",
                            "elasticloadbalancing:RemoveTags"
                        ],
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*",
                            "arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*"
                        ],
                        "Condition": {
                            "Null": {
                                "aws:RequestTag/elbv2.k8s.aws/cluster": "true",
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:AddTags",
                            "elasticloadbalancing:RemoveTags"
                        ],
                        "Resource": [
                            "arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*",
                            "arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*"
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:ModifyLoadBalancerAttributes",
                            "elasticloadbalancing:SetIpAddressType",
                            "elasticloadbalancing:SetSecurityGroups",
                            "elasticloadbalancing:SetSubnets",
                            "elasticloadbalancing:DeleteLoadBalancer",
                            "elasticloadbalancing:ModifyTargetGroup",
                            "elasticloadbalancing:ModifyTargetGroupAttributes",
                            "elasticloadbalancing:DeleteTargetGroup"
                        ],
                        "Resource": "*",
                        "Condition": {
                            "Null": {
                                "aws:ResourceTag/elbv2.k8s.aws/cluster": "false"
                            }
                        }
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:RegisterTargets",
                            "elasticloadbalancing:DeregisterTargets"
                        ],
                        "Resource": "arn:aws:elasticloadbalancing:*:*:targetgroup/*/*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "elasticloadbalancing:SetWebAcl",
                            "elasticloadbalancing:ModifyListener",
                            "elasticloadbalancing:AddListenerCertificates",
                            "elasticloadbalancing:RemoveListenerCertificates",
                            "elasticloadbalancing:ModifyRule"
                        ],
                        "Resource": "*"
                    }
                ]
            }
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-load-balancer-controller-policy'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.name
      transforms:
      - type: string
        string:
          fmt: "eks-irsa-%s-load-balancer-controller-policy"
  ######################################################################
  - name: aws-iam-role-load-balancer-controller
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: Role
      metadata:
        labels:
          mapping: load-balancer-controller
      spec:
        forProvider:
          assumeRolePolicyDocument: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-load-balancer-controller'
    # - fromFieldPath: spec.id
    #   toFieldPath: metadata.annotations[crossplane.io/external-name]
    #   transforms:
    #   - type: string
    #     string:
    #       fmt: "eks-irsa-%s-role"
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.arn
      toFieldPath: status.irsaRoleArnLoadBalancerController
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.assumeRolePolicyDocument
      combine:
        variables:
        - fromFieldPath: status.accountID
        - fromFieldPath: status.oidcProvider
        - fromFieldPath: status.oidcProvider
        - fromFieldPath: spec.id
        strategy: string
        string:
          fmt: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "arn:aws:iam::%s:oidc-provider/%s"
                  },
                  "Action": "sts:AssumeRoleWithWebIdentity",
                  "Condition": {
                    "StringEquals": {
                      "%s:sub": "system:serviceaccount:kube-system:%s-load-balancer-controller-sa"
                    }
                  }
                }
              ]
            }
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: aws-iam-role-attachment-load-balancer-controller
    base:
      apiVersion: iam.aws.crossplane.io/v1beta1
      kind: RolePolicyAttachment
      spec:
        forProvider:
          policyArnSelector:
            matchControllerRef: true
            matchLabels:
              mapping: load-balancer-controller
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              mapping: load-balancer-controller
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-load-balancer-controller'
  ######################################################################
  - name: k8s-service-account-load-balancer-controller
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              labels:
                app.kubernetes.io/component: controller
                app.kubernetes.io/name: aws-load-balancer-controller
             #name: patch
              namespace: kube-system
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-load-balancer-controller-sa'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-load-balancer-controller-sa'
    - fromFieldPath: status.irsaRoleArnLoadBalancerController
      toFieldPath: spec.forProvider.manifest.metadata.annotations[eks.amazonaws.com/role-arn]
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  ######################################################################
  - name: helm-release-load-balancer-controller
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      spec:
        rollbackLimit: 3
        forProvider:
          namespace: kube-system
          chart:
            name: aws-load-balancer-controller
            repository: https://aws.github.io/eks-charts
            #version: '0.5.9'
          set:
          - name: clusterName
            value: ""
          - name: serviceAccount.name
            value: ""
          - name: serviceAccount.create
            value: 'false'
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-load-balancer-controller'
    - fromFieldPath: status.clusterName
      toFieldPath: spec.forProvider.set[0].value
      policy:
        fromFieldPath: Required
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.set[1].value
      transforms:
      - type: string
        string:
          fmt: '%s-load-balancer-controller-sa'
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  ######################################################################
  - name: aws-apigw-vpclink
    base:
      apiVersion: apigatewayv2.aws.crossplane.io/v1beta1
      kind: VPCLink
      spec:
        forProvider:
         #name: patch
          region: eu-west-1
          securityGroupIdSelector:
            matchControllerRef: true
            matchLabels:
              mapping: vpclink
          subnetIdSelector:
            matchControllerRef: true
            matchLabels:
             access: private
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-vpclink'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.name
      transforms:
      - type: string
        string:
          fmt: '%s-vpclink'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.vpcLinkID
      toFieldPath: status.vpcLinkID
  ######################################################################
  - name: aws-security-group-vpc-link
    base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: SecurityGroup
      metadata:
        labels:
          mapping: vpclink
      spec:
        forProvider:
          description: Allow traffic for K8s Ingress
          groupName: ""
          region: eu-west-1
          ignoreEgress:  true
          ignoreIngress: true
          vpcIdSelector:
            matchControllerRef: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-vpclink-sg'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.groupName
      transforms:
      - type: string
        string:
          fmt: '%s-vpclink-sg'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - type: ToCompositeFieldPath
      fromFieldPath: status.atProvider.securityGroupID
      toFieldPath: status.securityGroupIDVpcLink
    readinessChecks:
    - type: None
  ######################################################################
  - name: aws-security-group-rule-vpclink-egress
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: SecurityGroupRule
      spec:
        forProvider:
          region:   eu-west-1
          type:     egress
          fromPort: 0
          toPort:   0
          protocol: "tcp"
          cidrBlock: "0.0.0.0/0"
          #securityGroupId: patch
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-vpclink-sg-rule-egress'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: status.securityGroupIDVpcLink
      toFieldPath: spec.forProvider.securityGroupId
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: aws-security-group-rule-vpclink-ingress-http
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: SecurityGroupRule
      spec:
        forProvider:
          region:   eu-west-1
          type:     ingress
          fromPort: 80
          toPort:   80
          protocol: "tcp"
          securityGroupId: #patch
          sourceSecurityGroupId: #patch
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-vpclink-sg-rule-ingress-http'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: status.securityGroupIDVpcLink
      toFieldPath: spec.forProvider.securityGroupId
      policy:
        fromFieldPath: Required
    - fromFieldPath: status.securityGroupIDNodegroup
      toFieldPath: spec.forProvider.sourceSecurityGroupId
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: aws-security-group-rule-vpclink-ingress-https
    base:
      apiVersion: ec2.aws.crossplane.io/v1alpha1
      kind: SecurityGroupRule
      spec:
        forProvider:
          region:   eu-west-1
          type:     ingress
          fromPort: 443
          toPort:   443
          protocol: "tcp"
          securityGroupId: #patch
          sourceSecurityGroupId: #patch
          # cidrBlocks:
          # - "23.0.3.0/24"
          # - "23.0.4.0/24"
          # - "23.0.5.0/24"
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-vpclink-sg-rule-ingress-https'
    - fromFieldPath: spec.parameters.region
      toFieldPath:   spec.forProvider.region
    - fromFieldPath: status.securityGroupIDVpcLink
      toFieldPath: spec.forProvider.securityGroupId
      policy:
        fromFieldPath: Required
    - fromFieldPath: status.securityGroupIDNodegroup
      toFieldPath: spec.forProvider.sourceSecurityGroupId
      policy:
        fromFieldPath: Required
  ######################################################################
  - name: k8s-secret-argocd-cluster-link
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: Secret
            metadata:
              namespace: argocd
              labels:
                argocd.argoproj.io/secret-type: cluster
            type: Opaque
            stringData:
              name: ""
              server: ""
              config: ""
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-secret'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.metadata.name
      transforms:
      - type: string
        string:
          fmt: '%s-secret'
    - fromFieldPath: spec.id
      toFieldPath: spec.forProvider.manifest.stringData.name
      policy:
        fromFieldPath: Required
    - fromFieldPath: status.clusterEndpoint
      toFieldPath: spec.forProvider.manifest.stringData.server
      policy:
        fromFieldPath: Required
    - type: CombineFromComposite
      toFieldPath: spec.forProvider.manifest.stringData.config
      combine:
        variables:
        #- fromFieldPath: status.accountID
        - fromFieldPath: status.clusterName
        - fromFieldPath: status.clusterCaData
        strategy: string
        string:
          fmt: |
            {
              "awsAuthConfig": {
                  "roleARN": "arn:aws:iam::518283773752:role/Deployer",
                  "clusterName": "%s"
              },
              "tlsClientConfig": {
                "caData": "%s"
              }
            }
      policy:
        fromFieldPath: Required
  